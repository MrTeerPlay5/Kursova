const express = require('express');
const sql = require('mssql');

const app = express();
const port = 3000;

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MS SQL
const config = {
    user: 'sa',
    password: '123',
    server: 'DESKTOP-VVN286Q',
    database: 'RegistrationDB',
    options: {
        encrypt: false,
        trustServerCertificate: true
    }
};

app.use(express.json()); // –ø–∞—Ä—Å–∏–Ω–≥ JSON:contentReference[oaicite:4]{index=4}

const path = require('path');
app.use(express.static(__dirname));


// GET / ‚Äì –Ω–∞–¥—Å–∏–ª–∞—î–º–æ HTML-—Ñ–æ—Ä–º—É
app.get('/', (req, res) => {
  res.sendFile(__dirname + '/index.html');
});

const WebSocket = require('ws');

// –°—Ç–≤–æ—Ä—é—î–º–æ WebSocket-—Å–µ—Ä–≤–µ—Ä
const wss = new WebSocket.Server({ port: 8080 });

wss.on('connection', (ws) => {
    console.log('üîó –ù–æ–≤–µ WebSocket-–∑ º—î–¥–Ω–∞–Ω–Ω—è');

    ws.on('message', (message) => {
        console.log('üì© –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', message);
    });

    ws.on('close', () => {
        console.log('‚ùå WebSocket-–∑ º—î–¥–Ω–∞–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ');
    });
});

function broadcast(message) {
  const data = JSON.stringify(message);
  console.log('üì§ –¢—Ä–∞–Ω—Å–ª—é—î–º–æ —á–µ—Ä–µ–∑ WebSocket:', data);
  wss.clients.forEach((client) => {
    if (client.readyState === WebSocket.OPEN) {
      client.send(data);
    }
  });
}

// –ó–º—ñ–Ω—é—î–º–æ –≤–∏–∫–ª–∏–∫ –≤ app.post('/api/update-room-players', ...)

app.post('/api/register', async (req, res) => {
    const { username, email, password } = req.body;
  
    try {
      const pool = await sql.connect(config);
      const result = await pool.request()
      // üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      const check = await pool.request()
        .input('username', sql.NVarChar(50), username)
        .input('email', sql.NVarChar(100), email)
        .query('SELECT * FROM Users WHERE username = @username OR email = @email');
  
      if (check.recordset.length > 0) {
        return res.status(400).json({ error: '–¢–∞–∫–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–±–æ email –≤–∂–µ —ñ—Å–Ω—É—î' });
      }
  
      // üìù –Ø–∫—â–æ –Ω–µ–º–∞—î ‚Äî –¥–æ–¥–∞—î–º–æ –Ω–æ–≤–æ–≥–æ
      await pool.request()
        .input('username', sql.NVarChar(50), username)
        .input('email', sql.NVarChar(100), email)
        .input('password', sql.NVarChar(100), password)
        .query('INSERT INTO Users (username, email, password) VALUES (@username, @email, @password)');
  
      res.json({ message: '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!' });
  
    } catch (err) {
      console.error(err);
      res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

app.post('/api/login', async (req, res) => {
  const { email, password } = req.body;

  try {
    const pool = await sql.connect(config);
    const result = await pool.request()
      .input('email', sql.NVarChar(100), email)
      .input('password', sql.NVarChar(100), password)
      .query('SELECT * FROM Users WHERE email = @email AND password = @password');

    if (result.recordset.length > 0) {
      res.json({ message: 'Login OK', username: result.recordset[0].username });
    } else {
      res.status(401).json({ error: '–ù–µ–≤—ñ—Ä–Ω–∏–π email –∞–±–æ –ø–∞—Ä–æ–ª—å' });
    }

  } catch (err) {
    console.error(err);
    res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.post('/api/save-progress', async (req, res) => {
  try {
      const { email, gameState } = req.body;

      const request = new sql.Request();
      await request
          .input('email', sql.NVarChar, email)
          .input('gameState', sql.NVarChar, gameState)
          .query(`
              MERGE GameProgress AS target
              USING (SELECT @email AS Email) AS source
              ON target.Email = source.Email
              WHEN MATCHED THEN 
                  UPDATE SET GameState = @gameState, UpdatedAt = GETDATE()
              WHEN NOT MATCHED THEN
                  INSERT (Email, GameState, UpdatedAt)
                  VALUES (@email, @gameState, GETDATE());
          `);

      res.json({ message: '–ü—Ä–æ–≥—Ä–µ—Å –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ' });
  } catch (err) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –ø—Ä–æ–≥—Ä–µ—Å—É:', err);
      res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.get('/api/load-progress', async (req, res) => {
  try {
    const pool = await sql.connect(config);
    // –ü—Ä–∏–ø—É—Å—Ç–∏–º–æ, –≤–∏ –∑–±–µ—Ä—ñ–≥–∞—î—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å –∑–∞ –ø–µ–≤–Ω–∏–º email
    // –ú–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ query-–ø–∞—Ä–∞–º–µ—Ç—Ä, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, ?email=player@example.com
    const email = req.query.email || 'player@example.com';
    const result = await pool.request()
      .input('email', sql.NVarChar, email)
      .query('SELECT TOP 1 GameState FROM GameProgress WHERE Email = @email ORDER BY UpdatedAt DESC');

    if (result.recordset.length > 0) {
      res.json(JSON.parse(result.recordset[0].GameState));
    } else {
      res.status(404).json({ error: '–ü—Ä–æ–≥—Ä–µ—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
    }
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// GET /users ‚Äì –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —É—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
app.get('/users', async (req, res) => {
  try {
    let pool = await sql.connect(config);
    let result = await pool.request().query('SELECT * FROM Users'); // SELECT –≤—Å—ñ –∫–æ–ª–æ–Ω–∫–∏:contentReference[oaicite:6]{index=6}
    res.json(result.recordset); // –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –º–∞—Å–∏–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.post('/api/save-waiting-room', async (req, res) => {
  try {
      const { roomCode, players, adminEmail } = req.body;

      const request = new sql.Request();
      await request
          .input('roomCode', sql.NVarChar, roomCode)
          .input('players', sql.NVarChar, players)
          .input('adminEmail', sql.NVarChar, adminEmail)
          .query(`
              MERGE Rooms AS target
              USING (SELECT @roomCode AS RoomCode) AS source
              ON target.RoomCode = source.RoomCode
              WHEN MATCHED THEN 
                  UPDATE SET Players = @players, AdminEmail = @adminEmail, CreatedAt = GETDATE()
              WHEN NOT MATCHED THEN
                  INSERT (RoomCode, Players, CreatedAt, AdminEmail)
                  VALUES (@roomCode, @players, GETDATE(), @adminEmail);
          `);

      res.json({ message: '–ö—ñ–º–Ω–∞—Ç–∞ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ' });
  } catch (err) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∫—ñ–º–Ω–∞—Ç–∏ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è:', err);
      res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.delete('/api/delete-room', async (req, res) => {
    try {
        const { roomCode } = req.body;

        const pool = await sql.connect(config);
        await pool.request()
            .input('roomCode', sql.NVarChar, roomCode)
            .query('DELETE FROM Rooms WHERE RoomCode = @roomCode');

        res.json({ message: '–ö—ñ–º–Ω–∞—Ç—É —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ' });
    } catch (err) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫—ñ–º–Ω–∞—Ç–∏:', err);
        res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

app.get('/api/get-room', async (req, res) => {
  try {
    const roomCode = req.query.roomCode;
    const pool = await sql.connect(config);

    const result = await pool.request()
      .input('roomCode', sql.NVarChar, roomCode)
      .query('SELECT RoomCode, Players FROM Rooms WHERE RoomCode = @roomCode');

    if (result.recordset.length > 0) {
      // –†–æ–∑–ø–∞—Ä—Å–∏–º–æ —Ä—è–¥–æ–∫ Players, —è–∫—â–æ –≤—ñ–Ω —î JSON
      let players;
      try {
        players = JSON.parse(result.recordset[0].Players);
      } catch (e) {
        // –Ø–∫—â–æ Players –Ω–µ —î –≤–∞–ª—ñ–¥–Ω–∏–º JSON, –ø—Ä–æ—Å—Ç–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä—è–¥–æ–∫
        players = result.recordset[0].Players;
      }

      const roomData = {
        RoomCode: result.recordset[0].RoomCode,
        Players: players // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–æ–∑–ø–∞—Ä—Å–µ–Ω–∏–π –º–∞—Å–∏–≤ –∞–±–æ —Ä—è–¥–æ–∫
      };

      res.json(roomData); // –ù–∞–¥—Å–∏–ª–∞—î–º–æ –æ–±'—î–∫—Ç –∑ RoomCode —ñ Players
    } else {
      res.status(404).json({ error: '–ö—ñ–º–Ω–∞—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞' });
    }
  } catch (err) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –∫—ñ–º–Ω–∞—Ç–∏:', err);
    res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.post('/api/update-room-players', async (req, res) => {
  try {
      const { roomCode, newPlayer } = req.body;
      const pool = await sql.connect(config);

      const result = await pool.request()
          .input('roomCode', sql.NVarChar, roomCode)
          .query('SELECT Players, AdminEmail FROM Rooms WHERE RoomCode = @roomCode');

      if (result.recordset.length === 0) {
          return res.status(404).json({ error: '–ö—ñ–º–Ω–∞—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞' });
      }

      let players = result.recordset[0].Players ? result.recordset[0].Players.split(',') : [];
      if (!players.includes(newPlayer)) {
          players.push(newPlayer);
      }

      const playersString = players.join(','); // <--- –°—Ç–≤–æ—Ä—é—î–º–æ —Ä—è–¥–æ–∫ –≥—Ä–∞–≤—Ü—ñ–≤

      await pool.request()
          .input('roomCode', sql.NVarChar, roomCode)
          .input('players', sql.NVarChar, playersString) // <--- –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä—è–¥–æ–∫
          .query('UPDATE Rooms SET Players = @players WHERE RoomCode = @roomCode');

      // ‚úÖ –í–ò–†–Ü–®–ï–ù–ù–Ø: –§–æ—Ä–º—É—î–º–æ –æ–±'—î–∫—Ç, –¥–µ `Players` - —Ü–µ –†–Ø–î–û–ö
      const broadcastData = {
          RoomCode: roomCode,
          Players: playersString, // <--- –ü–µ—Ä–µ–¥–∞—î–º–æ —Ä—è–¥–æ–∫, –∞ –Ω–µ –º–∞—Å–∏–≤
          AdminEmail: result.recordset[0].AdminEmail
      };

      // –¢—Ä–∞–Ω—Å–ª—é—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ –†–Ø–î–ö–û–ú –≥—Ä–∞–≤—Ü—ñ–≤
      broadcast({ type: 'PLAYERS_UPDATED', roomCode: roomCode, data: broadcastData });

      // –í—ñ–¥–ø–æ–≤—ñ–¥—å —Ç–æ–º—É, —Ö—Ç–æ –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è (—Ç—É—Ç –º–æ–∂–Ω–∞ –∑–∞–ª–∏—à–∏—Ç–∏ –º–∞—Å–∏–≤)
      res.json({ message: '–°–ø–∏—Å–æ–∫ –≥—Ä–∞–≤—Ü—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–æ', players: players });
  } catch (err) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –≥—Ä–∞–≤—Ü—ñ–≤:', err);
      res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// ‚úÖ –ï–Ω–¥–ø–æ—ñ–Ω—Ç, —â–æ –ø—Ä–∏–π–º–∞—î –í–°–Ü –ø–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ –≤—ñ–¥ –∞–¥–º—ñ–Ω–∞ —ñ —Ç—Ä–∞–Ω—Å–ª—é—î —ó—Ö
app.post('/api/game/start-full', async (req, res) => {
    const initialData = req.body;
    const { roomCode, players, boardState, targetLaps, globalEventType, currentPlayerNickname } = initialData;

    if (!players || players.length === 0) {
        return res.status(400).json({ error: '–°–ø–∏—Å–æ–∫ –≥—Ä–∞–≤—Ü—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.' });
    }

    try {
        const pool = await sql.connect(config);
        await pool.request()
            .input('RoomCode', sql.NVarChar, roomCode)
            .input('CurrentPlayerNickname', sql.NVarChar, currentPlayerNickname)
            .input('PlayerPositions', sql.NVarChar, '{}') 
            .input('BoardState', sql.NVarChar(sql.MAX), JSON.stringify(boardState))
            .query(`
                MERGE ActiveGames AS target
                USING (SELECT @RoomCode AS RoomCode) AS source ON (target.RoomCode = source.RoomCode)
                WHEN NOT MATCHED THEN
                    INSERT (RoomCode, CurrentPlayerNickname, PlayerPositions, BoardState)
                    VALUES (@RoomCode, @CurrentPlayerNickname, @PlayerPositions, @BoardState);
            `);
      
        // –†–æ–∑—Å–∏–ª–∞—î–º–æ –≤—Å—ñ–º —Å–∏–≥–Ω–∞–ª –ø—Ä–æ —Å—Ç–∞—Ä—Ç –≥—Ä–∏ –∑ –ø–æ–≤–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
        broadcast({ type: 'GAME_STARTED', roomCode, data: initialData });
        res.json({ message: '–ì—Ä–∞ —É—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–ø–æ—á–∞—Ç–∞!' });

    } catch (err) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ –≥—Ä–∏:', err.message);
        res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –ï–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –û–¢–†–ò–ú–ê–ù–ù–Ø –°–¢–ê–ù–£ –ì–†–ò
app.get('/api/game/state', async (req, res) => {
  const { roomCode } = req.query;

  try {
      const pool = await sql.connect(config);
      const result = await pool.request()
          .input('RoomCode', sql.NVarChar, roomCode)
          .query('SELECT * FROM ActiveGames WHERE RoomCode = @RoomCode');
      
      if (result.recordset.length > 0) {
          res.json(result.recordset[0]);
      } else {
          res.status(404).json({ error: '–Ü–≥—Ä–æ–≤—É —Å–µ—Å—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.' });
      }
  } catch (err)
  {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞–Ω—É –≥—Ä–∏:', err);
      res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ï–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π –≥—Ä–∞–≤—Ü—ñ–≤
app.post('/api/game/update-positions', async (req, res) => {
    const { roomCode, playerPositions } = req.body;

    try {
        const pool = await sql.connect(config);
        await pool.request()
            .input('RoomCode', sql.NVarChar, roomCode)
            .input('PlayerPositions', sql.NVarChar, playerPositions) // playerPositions - —Ü–µ JSON-—Ä—è–¥–æ–∫
            .query('UPDATE ActiveGames SET PlayerPositions = @PlayerPositions WHERE RoomCode = @RoomCode');
        
        // –†–æ–∑—Å–∏–ª–∞—î–º–æ –≤—Å—ñ–º –æ–Ω–æ–≤–ª–µ–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó
        broadcast({ 
            type: 'POSITIONS_UPDATED', 
            roomCode: roomCode, 
            data: { playerPositions: JSON.parse(playerPositions) } // –†–æ–∑–ø–∞–∫–æ–≤—É—î–º–æ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ
        });

        res.json({ message: '–ü–æ–∑–∏—Ü—ñ—ó —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ' });
    } catch (err) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø–æ–∑–∏—Ü—ñ–π:', err.message);
        res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

app.post('/api/game/update-turn', async (req, res) => {
  const { roomCode, currentPlayerNickname } = req.body;

  try {
      const pool = await sql.connect(config);
      // –û–Ω–æ–≤–ª—é—î–º–æ, —Ö—Ç–æ —Ö–æ–¥–∏—Ç—å –Ω–∞—Å—Ç—É–ø–Ω–∏–º —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
      await pool.request()
          .input('RoomCode', sql.NVarChar, roomCode)
          .input('CurrentPlayerNickname', sql.NVarChar, currentPlayerNickname)
          .query('UPDATE ActiveGames SET CurrentPlayerNickname = @CurrentPlayerNickname WHERE RoomCode = @RoomCode');
      
      // –†–æ–∑—Å–∏–ª–∞—î–º–æ –≤—Å—ñ–º –æ–Ω–æ–≤–ª–µ–Ω–Ω—è, —Ö—Ç–æ —Ç–µ–ø–µ—Ä —Ö–æ–¥–∏—Ç—å
      broadcast({ 
          type: 'TURN_UPDATED', 
          roomCode: roomCode, 
          data: { currentPlayerNickname: currentPlayerNickname } 
      });

      res.json({ message: '–•—ñ–¥ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ' });
  } catch (err) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Ö–æ–¥—É:', err);
      res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// ‚úÖ –ù–æ–≤–∏–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Ñ—ñ–Ω—ñ—à—É –≥—Ä–∞–≤—Ü—è
app.post('/api/game/player-finished', (req, res) => {
    const { roomCode, nickname } = req.body;
    
    // ‚úÖ –¢—Ä–∞–Ω—Å–ª—é—î–º–æ –≤—Å—ñ–º, —â–æ —Ü–µ–π –≥—Ä–∞–≤–µ—Ü—å —Ñ—ñ–Ω—ñ—à—É–≤–∞–≤
    broadcast({ 
        type: 'PLAYER_FINISHED_LAP', 
        roomCode: roomCode, 
        data: { finishedPlayerNickname: nickname } 
    });

    res.json({ message: 'Finish reported' });
});

// ‚úÖ –ï–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –≥—Ä–∞–≤—Ü—è –≤ –∫–ª—ñ—Ç—Ü—ñ
app.post('/api/game/player-jailed', async (req, res) => {
    const { roomCode, nickname } = req.body;
    
    console.log(`–ì—Ä–∞–≤–µ—Ü—å ${nickname} –≤ –∫—ñ–º–Ω–∞—Ç—ñ ${roomCode} –ø–æ—Ç—Ä–∞–ø–∏–≤ —É –∫–ª—ñ—Ç–∫—É.`);
    
    // –¢—Ä–∞–Ω—Å–ª—é—î–º–æ –≤—Å—ñ–º, —â–æ –≥—Ä–∞–≤–µ—Ü—å –ø–æ—Ç—Ä–∞–ø–∏–≤ —É –∫–ª—ñ—Ç–∫—É
    broadcast({ 
        type: 'PLAYER_JAILED', 
        roomCode: roomCode, 
        data: { jailedPlayerNickname: nickname } 
    });

    res.json({ message: 'Jail status reported successfully' });
});

// ‚úÖ –ù–æ–≤–∏–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è —Ç—Ä–∞–Ω—Å–ª—è—Ü—ñ—ó –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ñ–≤–µ–Ω—Ç—É
app.post('/api/game/broadcast-event', (req, res) => {
    const { roomCode, eventType } = req.body;
    
    console.log(`–¢—Ä–∞–Ω—Å–ª—è—Ü—ñ—è —ñ–≤–µ–Ω—Ç—É ${eventType} –¥–ª—è –∫—ñ–º–Ω–∞—Ç–∏ ${roomCode}`);
    
    // –†–æ–∑—Å–∏–ª–∞—î–º–æ –≤—Å—ñ–º –∫–ª—ñ—î–Ω—Ç–∞–º —É –∫—ñ–º–Ω–∞—Ç—ñ
    broadcast({ 
        type: 'GLOBAL_EVENT_UPDATE', 
        roomCode: roomCode, 
        data: { eventType: parseInt(eventType) } 
    });

    res.json({ message: 'Event broadcasted' });
});

app.post('/api/game/update-board', (req, res) => {
    const { roomCode, boardState } = req.body;
    
    console.log(`–û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–æ—à–∫–∏ –¥–ª—è –∫—ñ–º–Ω–∞—Ç–∏ ${roomCode}`);
    
    // –†–æ–∑—Å–∏–ª–∞—î–º–æ –≤—Å—ñ–º –∫–ª—ñ—î–Ω—Ç–∞–º —É –∫—ñ–º–Ω–∞—Ç—ñ –Ω–æ–≤–∏–π —Å—Ç–∞–Ω –¥–æ—à–∫–∏
    broadcast({ 
        type: 'BOARD_UPDATED', 
        roomCode: roomCode, 
        data: { boardState: JSON.parse(boardState) } 
    });

    res.json({ message: 'Board state broadcasted' });
});

// ‚úÖ –ù–æ–≤–∏–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è —Ç—Ä–∞–Ω—Å–ª—è—Ü—ñ—ó —Å—Ç–∞–Ω—É –Ω–æ–≤–æ–≥–æ –∫–æ–ª–∞
app.post('/api/game/new-lap', (req, res) => {
    const { roomCode, combinedData } = req.body;
    
    console.log(`–¢—Ä–∞–Ω—Å–ª—è—Ü—ñ—è –Ω–æ–≤–æ–≥–æ –∫–æ–ª–∞ –¥–ª—è –∫—ñ–º–Ω–∞—Ç–∏ ${roomCode}`);
    
    // –†–æ–∑—Å–∏–ª–∞—î–º–æ –≤—Å—ñ–º –∫–ª—ñ—î–Ω—Ç–∞–º —É –∫—ñ–º–Ω–∞—Ç—ñ –¥–∞–Ω—ñ –ø—Ä–æ –Ω–æ–≤–µ –∫–æ–ª–æ
    broadcast({ 
        type: 'NEW_LAP_UPDATE', 
        roomCode: roomCode, 
        data: JSON.parse(combinedData) // –î–∞–Ω—ñ –≤–∂–µ —î –æ–±'—î–∫—Ç–æ–º –≤ `NewLapData`
    });

    res.json({ message: 'New lap state broadcasted' });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(port, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://localhost:${port}`);
});
